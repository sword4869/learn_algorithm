import{_ as e,V as a,W as E,X as i}from"./framework-80dbfac3.js";const h={},r=i('<ul><li><a href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">【二分查找】</a></li><li><a href="#target%E5%9C%A8%E4%B8%A4%E8%BE%B9%E8%BF%98%E6%98%AF%E4%B8%AD%E9%97%B4">target在两边还是中间</a></li><li><a href="#leftmost%E5%92%8Crightmost%E7%9A%84%E6%A0%87%E5%87%86%E7%89%88%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88%E6%89%BE%E5%88%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E">leftmost和rightmost的标准版返回什么，找到了怎么办</a></li><li><a href="#leftmost%E5%92%8Crightmost%E7%9A%84%E6%9B%BF%E8%BA%AB%E7%89%88%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88%E8%B0%81%E6%98%AF%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E">leftmost和rightmost的替身版返回什么、谁是大于等于小于等于</a></li><li><a href="#%E9%93%BE%E8%A1%A8">【链表】</a></li><li><a href="#%E9%93%BE%E8%A1%A8%E7%9A%84%E9%81%8D%E5%8E%86%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88">链表的遍历条件是什么</a></li><li><a href="#%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4%E9%9C%80%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88">链表的插入和删除需要做什么</a></li><li><a href="#%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9">删除结点</a></li><li><a href="#%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9">插入结点</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%BB%93%E7%82%B9">删除倒数结点</a></li><li><a href="#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E6%96%B9%E5%BC%8F">反转链表的方式</a></li><li><a href="#%E9%80%92%E5%BD%92">【递归】</a></li><li><a href="#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%AC%E4%B8%80%E9%A1%B9%E5%85%83%E7%B4%A0%E6%98%AF%E5%A4%9A%E5%B0%91%E7%AC%AC%E4%BA%8C%E9%A1%B9%E5%85%83%E7%B4%A0%E6%98%AF%E5%A4%9A%E5%B0%91">斐波那契数列的第一项元素是多少，第二项元素是多少？</a></li><li><a href="#%E7%88%AC%E6%A5%BC%E6%A2%AF%E6%98%AF%E4%BB%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%AC%E5%87%A0%E9%A1%B9%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%A7%8B">爬楼梯是从斐波那契数列的第几项作为开始？</a></li><li><a href="#%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%80%92%E5%BD%92%E8%A7%84%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88%E7%94%A8%E5%88%B0%E4%BA%86%E5%87%A0%E6%AC%A1%E9%80%92%E5%BD%92">汉诺塔的递归规则是什么？用到了几次递归？</a></li><li><a href="#%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E7%9A%84%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88">杨辉三角的边界条件是什么</a></li><li><a href="#%E6%8E%92%E5%BA%8F">【排序】</a></li><li><a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%9A%84%E6%9C%89%E5%BA%8F%E9%83%A8%E5%88%86%E6%98%AF%E5%A4%B4%E9%83%A8%E8%BF%98%E6%98%AF%E5%B0%BE%E9%83%A8">插入排序的有序部分是头部还是尾部</a></li><li><a href="#%E6%A0%91">【树】</a></li><li><a href="#%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E7%94%A8%E6%A0%88%E8%BF%98%E6%98%AF%E9%98%9F%E5%88%97">树的层序遍历、深度遍历用栈还是队列</a></li><li><a href="#%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E7%9A%84%E8%A7%84%E5%88%99">树的深度遍历的规则</a></li><li><a href="#%E5%9B%BE">【图】</a></li></ul><hr><h2 id="【二分查找】" tabindex="-1"><a class="header-anchor" href="#【二分查找】" aria-hidden="true">#</a> 【二分查找】</h2><h2 id="target在两边还是中间" tabindex="-1"><a class="header-anchor" href="#target在两边还是中间" aria-hidden="true">#</a> target在两边还是中间</h2><p><code>target &lt; a[m] &lt; target</code></p><h2 id="leftmost和rightmost的标准版返回什么-找到了怎么办" tabindex="-1"><a class="header-anchor" href="#leftmost和rightmost的标准版返回什么-找到了怎么办" aria-hidden="true">#</a> leftmost和rightmost的标准版返回什么，找到了怎么办</h2><p>返回candidate.</p><p>找到了：<code>candidate = m</code>，外加继续移动</p><ul><li>leftmost: 左移<code>j = m - 1;</code></li><li>rightmost: 右移<code>i = m + 1;</code></li></ul><h2 id="leftmost和rightmost的替身版返回什么、谁是大于等于小于等于" tabindex="-1"><a class="header-anchor" href="#leftmost和rightmost的替身版返回什么、谁是大于等于小于等于" aria-hidden="true">#</a> leftmost和rightmost的替身版返回什么、谁是大于等于小于等于</h2><p>leftmost: 左移<code>if &lt;=</code>；<code>return i</code></p><p>rightmost: <code>if &lt;</code>, 右移<code>else</code>；<code>return i-1</code></p><h2 id="【链表】" tabindex="-1"><a class="header-anchor" href="#【链表】" aria-hidden="true">#</a> 【链表】</h2><h2 id="链表的遍历条件是什么" tabindex="-1"><a class="header-anchor" href="#链表的遍历条件是什么" aria-hidden="true">#</a> 链表的遍历条件是什么</h2><p>当前结点不为空。</p><p>遍历时直接打印和更新。</p><p>无哨兵头直接开始 cur=head，有哨兵从真头开始，cur=head.next。</p><h2 id="链表的插入和删除需要做什么" tabindex="-1"><a class="header-anchor" href="#链表的插入和删除需要做什么" aria-hidden="true">#</a> 链表的插入和删除需要做什么</h2><p>找到前一个结点。</p><h2 id="删除结点" tabindex="-1"><a class="header-anchor" href="#删除结点" aria-hidden="true">#</a> 删除结点</h2><p>单链表：</p><ul><li><p>删除头结点：判断真头非空 + 更新头 <code>head=head.next</code>。</p></li><li><p>删除下标：</p><p>通用。找到前一个结点<code>index-1</code>，<code>pre.next = pre.next.next</code>。临界，index超界，要么是<code>index-1</code>本身超界，要么是<code>index-1</code>得到尾结点。</p><p>临界。index=0，对应删除头结点；</p></li></ul><h2 id="插入结点" tabindex="-1"><a class="header-anchor" href="#插入结点" aria-hidden="true">#</a> 插入结点</h2><p>单链表：</p><ul><li><p>插入头结点：不用判空</p><p><code>head = new Node(value, head)</code> / <code>head.next = new Node(value, head.next)</code></p></li></ul><h2 id="删除倒数结点" tabindex="-1"><a class="header-anchor" href="#删除倒数结点" aria-hidden="true">#</a> 删除倒数结点</h2><p>加哨兵，因为删除</p><ul><li>递归：找下一个结点的倒数位置</li><li>快慢指针：n+1，+1是因为慢指针找前一个结点</li></ul><h2 id="反转链表的方式" tabindex="-1"><a class="header-anchor" href="#反转链表的方式" aria-hidden="true">#</a> 反转链表的方式</h2><ul><li>遍历，创建新链表</li><li>遍历到数组，旧链表重新赋值</li><li>递归找最后一个，递归后操作cur和next</li><li>让原来头的下一个结点插入到新头前，原头不动，新头更新</li><li>pre和cur操作链表</li></ul><h2 id="【递归】" tabindex="-1"><a class="header-anchor" href="#【递归】" aria-hidden="true">#</a> 【递归】</h2><h2 id="斐波那契数列的第一项元素是多少-第二项元素是多少" tabindex="-1"><a class="header-anchor" href="#斐波那契数列的第一项元素是多少-第二项元素是多少" aria-hidden="true">#</a> 斐波那契数列的第一项元素是多少，第二项元素是多少？</h2><p>0,1</p><h2 id="爬楼梯是从斐波那契数列的第几项作为开始" tabindex="-1"><a class="header-anchor" href="#爬楼梯是从斐波那契数列的第几项作为开始" aria-hidden="true">#</a> 爬楼梯是从斐波那契数列的第几项作为开始？</h2><p>1</p><h2 id="汉诺塔的递归规则是什么-用到了几次递归" tabindex="-1"><a class="header-anchor" href="#汉诺塔的递归规则是什么-用到了几次递归" aria-hidden="true">#</a> 汉诺塔的递归规则是什么？用到了几次递归？</h2><p>123→b，4→c，123→c。</p><p>首尾两次</p><h2 id="杨辉三角的边界条件是什么" tabindex="-1"><a class="header-anchor" href="#杨辉三角的边界条件是什么" aria-hidden="true">#</a> 杨辉三角的边界条件是什么</h2><p>左边、斜边</p><p>恰好是 j == 0 和 i == j</p><h2 id="【排序】" tabindex="-1"><a class="header-anchor" href="#【排序】" aria-hidden="true">#</a> 【排序】</h2><h2 id="插入排序的有序部分是头部还是尾部" tabindex="-1"><a class="header-anchor" href="#插入排序的有序部分是头部还是尾部" aria-hidden="true">#</a> 插入排序的有序部分是头部还是尾部</h2><p>头部</p><h2 id="【树】" tabindex="-1"><a class="header-anchor" href="#【树】" aria-hidden="true">#</a> 【树】</h2><h2 id="树的层序遍历、深度遍历用栈还是队列" tabindex="-1"><a class="header-anchor" href="#树的层序遍历、深度遍历用栈还是队列" aria-hidden="true">#</a> 树的层序遍历、深度遍历用栈还是队列</h2><h2 id="树的深度遍历的规则" tabindex="-1"><a class="header-anchor" href="#树的深度遍历的规则" aria-hidden="true">#</a> 树的深度遍历的规则</h2><h2 id="【图】" tabindex="-1"><a class="header-anchor" href="#【图】" aria-hidden="true">#</a> 【图】</h2>',48),d=[r];function t(l,A){return a(),E("div",null,d)}const c=e(h,[["render",t],["__file","背.html.vue"]]);export{c as default};
