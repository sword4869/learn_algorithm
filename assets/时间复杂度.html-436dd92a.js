import{_ as n,V as s,W as a,X as t}from"./framework-80dbfac3.js";const p={},e=t(`<ul><li><a href="#1-%E5%A4%A7o%E8%A1%A8%E7%A4%BA%E6%B3%95">1. 大O表示法</a></li><li><a href="#%E9%80%92%E5%BD%92%E5%A4%8D%E6%9D%82%E5%BA%A6-master-theorem">递归复杂度 Master theorem</a></li><li><a href="#2-contain-%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8">2. contain 是否存在</a></li><li><a href="#3-test">3. test</a></li></ul><hr><h2 id="_1-大o表示法" tabindex="-1"><a class="header-anchor" href="#_1-大o表示法" aria-hidden="true">#</a> 1. 大O表示法</h2><ul><li>渐进上界：代表算法执行的最差情况</li><li>渐进下界 $\\Omega(g(n))$：代表算法执行的最佳情况</li><li>渐进紧界$\\Theta(g(n))$</li></ul><p>大O表示法</p><ul><li>表达式中相乘的常量，可以省略，如 <ul><li>$f(n) = 100*n^2$ 中的 $100$</li></ul></li><li>多项式中数量规模更小（低次项）的表达式，如 <ul><li>$f(n)=n^2+n$ 中的 $n$</li><li>$f(n) = n^3 + n^2$ 中的 $n^2$</li></ul></li><li>不同底数的对数，渐进上界可以用一个对数函数 $\\log n$ 表示 <ul><li>例如：$log_2(n)$ 可以替换为 $log_{10}(n)$，因为 $log_2(n) = \\frac{log_{10}(n)}{log_{10}(2)}$，相乘的常量 $\\frac{1}{log_{10}(2)}$ 可以省略</li></ul></li><li>类似的，对数的常数次幂可省略 <ul><li>如：$log(n^c) = c * log(n)$</li></ul></li></ul><p>按时间复杂度从低到高</p><ul><li>黑色横线 $O(1)$，常量时间，意味着算法时间并不随数据规模而变化</li><li>绿色 $O(log(n))$，对数时间</li><li>蓝色 $O(n)$，线性时间，算法时间与数据规模成正比</li><li>橙色 $O(n*log(n))$，拟线性时间</li><li>红色 $O(n^2)$ 平方时间</li><li>黑色朝上 $O(2^n)$ 指数时间</li><li>没画出来的 $O(n!)$</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String a = String.format(&quot;%d&quot;, 12);     // 12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="递归复杂度-master-theorem" tabindex="-1"><a class="header-anchor" href="#递归复杂度-master-theorem" aria-hidden="true">#</a> 递归复杂度 Master theorem</h2><blockquote><p>x不等于c时，T(n) = $O(n^{max(x,c)})$；相等时，T(n) = $O(n^c \\log n)$</p></blockquote><p>若有递归式 $$ T(n) = aT(\\frac{n}{b}) + O(n^c) $$ 其中</p><ul><li>$T(n)$ 是问题的运行时间，$n$ 是数据规模</li><li>$a$ 是子问题个数</li><li>$T(\\dfrac{n}{b})$ 是子问题运行时间，每个子问题被拆成原问题数据规模的 $\\dfrac{n}{b}$</li><li>$O(n^c)$ 是除递归外执行的计算</li></ul><p>令 $x = \\log_{b}{a}$，即 $x = \\log_{子问题缩小倍数}{子问题个数}$</p><p>那么 $$ T(n) = \\begin{cases} \\Theta(n^x) &amp; f(n) = O(n^c) 并且 c \\lt x\\ \\Theta(n^x\\log{n}) &amp; f(n) = \\Theta(n^x)\\ \\Theta(n^c) &amp; f(n) = \\Omega(n^c) 并且 c \\gt x \\end{cases} $$</p><p><strong>例1</strong></p><p>$T(n) = 2T(\\frac{n}{2}) + n^4$</p><ul><li>此时 $x = 1 &lt; 4$，由后者决定整个时间复杂度 $\\Theta(n^4)$</li></ul><p><strong>例2</strong></p><p>$T(n) = T(\\frac{7n}{10}) + n$</p><ul><li>$a=1, b=\\frac{10}{7}, x=0, c=1$</li><li>此时 $x = 0 &lt; 1$，由后者决定整个时间复杂度 $\\Theta(n)$</li></ul><p><strong>例3</strong></p><p>$T(n) = 16T(\\frac{n}{4}) + n^2$</p><ul><li>$a=16, b=4, x=2, c=2$</li><li>此时 $x=2 = c$，时间复杂度 $\\Theta(n^2 \\log{n})$</li></ul><p><strong>例4</strong></p><p>$T(n)=7T(\\frac{n}{3}) + n^2$</p><ul><li>$a=7, b=3, x=1.?, c=2$</li><li>此时 $x = \\log_{3}{7} &lt; 2$，由后者决定整个时间复杂度 $\\Theta(n^2)$</li></ul><p><strong>例5</strong></p><p>$T(n) = 7T(\\frac{n}{2}) + n^2$</p><ul><li>$a=7, b=2, x=2.?, c=2$</li><li>此时 $x = log_2{7} &gt; 2$，由前者决定整个时间复杂度 $\\Theta(n^{\\log_2{7}})$</li></ul><p><strong>例6</strong></p><p>$T(n) = 2T(\\frac{n}{4}) + \\sqrt{n}$</p><ul><li>$a=2, b=4, x = 0.5, c=0.5$</li><li>此时 $x = 0.5 = c$，时间复杂度 $\\Theta(\\sqrt{n}\\ \\log{n})$</li></ul><h2 id="_2-contain-是否存在" tabindex="-1"><a class="header-anchor" href="#_2-contain-是否存在" aria-hidden="true">#</a> 2. contain 是否存在</h2><p>contain + getIndex，而不是直接 return true/false.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//判断id在集合中是否存在</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//通过id获取索引的方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> stu <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sid <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-test" tabindex="-1"><a class="header-anchor" href="#_3-test" aria-hidden="true">#</a> 3. test</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> list<span class="token operator">::</span><span class="token function">removeFirst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),l=[e];function c(o,i){return s(),a("div",null,l)}const r=n(p,[["render",c],["__file","时间复杂度.html.vue"]]);export{r as default};
