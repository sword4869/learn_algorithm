import{_ as n,V as s,W as a,X as t}from"./framework-80dbfac3.js";const p={},e=t(`<ul><li><a href="#1-%E6%A0%88stack">1. 栈stack</a><ul><li><a href="#11-%E5%A4%B4%E6%96%87%E4%BB%B6">1.1. 头文件</a></li><li><a href="#12-%E5%87%BD%E6%95%B0">1.2. 函数</a></li><li><a href="#13-%E4%BE%8B%E5%AD%90">1.3. 例子</a></li></ul></li><li><a href="#2-%E9%98%9F%E5%88%97queue">2. 队列queue</a><ul><li><a href="#21-%E5%A4%B4%E6%96%87%E4%BB%B6">2.1. 头文件</a></li><li><a href="#22-%E5%87%BD%E6%95%B0">2.2. 函数</a></li><li><a href="#23-%E4%BE%8B%E5%AD%90">2.3. 例子</a></li></ul></li></ul><hr><h1 id="_1-栈stack" tabindex="-1"><a class="header-anchor" href="#_1-栈stack" aria-hidden="true">#</a> 1. 栈stack</h1><p>LIFO: Last In First Out 后进先出</p><h2 id="_1-1-头文件" tabindex="-1"><a class="header-anchor" href="#_1-1-头文件" aria-hidden="true">#</a> 1.1. 头文件</h2><p><code>#include&lt;stack&gt;</code></p><h2 id="_1-2-函数" tabindex="-1"><a class="header-anchor" href="#_1-2-函数" aria-hidden="true">#</a> 1.2. 函数</h2><table><thead><tr><th>返回值</th><th>函数</th><th>作用</th></tr></thead><tbody><tr><td></td><td><code>stack&lt;T&gt; s;</code></td><td>声明一个存储T类型数据的栈</td></tr><tr><td></td><td><code>stack&lt;T&gt; s2(s1)</code></td><td>拷贝构造</td></tr><tr><td></td><td>s1.swap(s2)或者swap(s1,s2)</td><td>交换两个栈</td></tr><tr><td>void</td><td>s.push(T n);</td><td>将T类型数据n压入栈的顶端</td></tr><tr><td>void</td><td>s.pop()</td><td>弹出顶层元素</td></tr><tr><td>T</td><td>s.top()</td><td>获得顶层元素的值</td></tr><tr><td>int</td><td>s.size()</td><td>返回栈中元素的个数</td></tr><tr><td>bool</td><td>s.empty()</td><td>返回真表示空栈，假表示非空栈</td></tr></tbody></table><p>除此之外，容器vector的别的都没有，尤其是没有<code>[]</code>获取下标元素和<code>push_back()</code>（是<code>push()</code>）。</p><h2 id="_1-3-例子" tabindex="-1"><a class="header-anchor" href="#_1-3-例子" aria-hidden="true">#</a> 1.3. 例子</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>             <span class="token comment">//声明存储int类型数据的栈</span>
    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//{}→{1}</span>
    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//{1}→{2,1}</span>
    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//{2,1}→{3,2,1}</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 3</span>
    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//{3,2,1}→{2,1}</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 2</span>
    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//{2,1}→{1}</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 1</span>
    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//{1}→{}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-队列queue" tabindex="-1"><a class="header-anchor" href="#_2-队列queue" aria-hidden="true">#</a> 2. 队列queue</h1><p>FIFO: First In First Out 先进先出</p><h2 id="_2-1-头文件" tabindex="-1"><a class="header-anchor" href="#_2-1-头文件" aria-hidden="true">#</a> 2.1. 头文件</h2><p><code>#include&lt;queue&gt;</code></p><h2 id="_2-2-函数" tabindex="-1"><a class="header-anchor" href="#_2-2-函数" aria-hidden="true">#</a> 2.2. 函数</h2><table><thead><tr><th>返回值</th><th>函数</th><th>作用</th></tr></thead><tbody><tr><td></td><td><code>queue&lt;T&gt; q;</code></td><td>声明一个存储T类型数据的队列</td></tr><tr><td></td><td><code>queue&lt;T&gt; q2(q1)</code></td><td></td></tr><tr><td></td><td>q1.swap(q2)或者swap(q1,q2)</td><td>交换两个队列</td></tr><tr><td>void</td><td>q.push(T n)或者q.emplace(T n)</td><td>将T类型数据n压入队列尾端</td></tr><tr><td>void</td><td>q.pop()</td><td>弹出队首元素</td></tr><tr><td>T</td><td>q.front()</td><td>获得队首元素的值</td></tr><tr><td>T</td><td>q.back()</td><td>获得队尾元素的值</td></tr><tr><td>int</td><td>q.size()</td><td>返回队列中元素的个数</td></tr><tr><td>bool</td><td>q.empty()</td><td>返回真表示空队列，假表示非空队列</td></tr></tbody></table><p>除此之外，容器vector的别的都没有，尤其是没有[]获取下标元素。</p><h2 id="_2-3-例子" tabindex="-1"><a class="header-anchor" href="#_2-3-例子" aria-hidden="true">#</a> 2.3. 例子</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>              <span class="token comment">//声明存储int类型数据的队列</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//{}→{1}</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//{1}→{1,2}</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//{1,2}→{1,2,3}</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 3</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 3</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//{1,2,3}→{2,3}</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//{2,3}→{3}</span>
    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//{3}→{}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","queue stack.html.vue"]]);export{d as default};
